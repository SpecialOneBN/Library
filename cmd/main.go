package main

import (
	_ "Library/docs"
	"Library/internal/config"
	"Library/internal/facade"
	"Library/internal/handler"
	"Library/internal/initdata"
	"Library/internal/repository/postgres"
	"Library/internal/service/author"
	"Library/internal/service/book"
	service "Library/internal/service/libraryService"
	"Library/internal/service/user"
	"Library/pkg/database"
	"log"
	"net/http"
)

// @title Library API
// @version 1.0
// @description API –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å —Å—É–ø–µ—Ä—Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ —Ñ–∞—Å–∞–¥–æ–º. –í—ã–¥–∞—á–∞, –≤–æ–∑–≤—Ä–∞—Ç, –∞–≤—Ç–æ—Ä—ã –∏ –∫–Ω–∏–≥–∏.

// @contact.name Nikolay Korotaev
// @contact.url http://localhost:8080
// @contact.email Korotallie@gmail.com

// @host localhost:8080
// @BasePath /
func main() {
	cfg := config.LoadConfig()

	db, err := database.NewPostgresDB(cfg)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	log.Println("–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	if err := database.RunMigrations(db, "./migrations"); err != nil {
		log.Fatalf("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", err)
	}

	initdata.InitDatabase(db)

	log.Println("–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

	// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	userRepo := repository.NewUserRepository(db)
	bookRepo := repository.NewBookRepository(db)
	authorRepo := repository.NewAuthorRepository(db)
	rentedRepo := repository.NewRentedBookRepository(db)

	// –°–µ—Ä–≤–∏—Å—ã
	uService := user.NewUserService(userRepo)
	bService := book.NewBookService(bookRepo)
	aService := author.NewAuthorService(authorRepo)
	librarySvc := service.NewLibraryService(userRepo, bookRepo, authorRepo, rentedRepo)

	// –§–∞—Å–∞–¥
	libraryFacade := facade.NewLibraryFacade(librarySvc)

	// –†–æ—É—Ç–µ—Ä
	router := handler.NewRouter(uService, bService, aService, libraryFacade)

	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080 üöÄ")
	if err := http.ListenAndServe(":8080", router); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
